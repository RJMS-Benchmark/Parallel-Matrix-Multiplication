double matrixMultiOMP(matrix matrixA, matrix matrixB, matrix matrixC){
  printf("\nStart parallel multiplication with openMP ... \n");
  int T[8], i, numIters=0;
  for(i=0;i<8;i++){
    T[i]=0;
  }
  double time1=omp_get_wtime();
  #pragma omp parallel
  {
 
    #pragma omp for private(col,add) reduction(+: numIters)
     for(row=0;row<matrixA.rows;row++){
        for(col=0;col<matrixB.cols;col++){
          int tempSum=0;
          for(add=0;add<matrixA.cols;add++){
            tempSum += matrixA.matrix[row][add] * matrixB.matrix[add][col];
	    T[omp_get_thread_num()]++;
	    numIters++;
          }
          matrixC.matrix[row][col] = tempSum; 
        }
      }
  }
  double time2=omp_get_wtime();
  printf("finished\n\n");
  for(i=0;i<8;i++){
    printf("\nT%d: %d ",i,T[i]);
  }
  printf("Number of Iterations: %d\n",numIters);
  return time2-time1;
}
